--- arch/powerpc/kvm/book3s_hv.c
+++ arch/powerpc/kvm/book3s_hv.c
@@ -1951,9 +1951,6 @@
 	int r;
 	int srcu_idx;
 	unsigned long ebb_regs[3] = {};	/* shut up GCC */
-	unsigned long user_tar = 0;
-	unsigned long proc_fscr = 0;
-	unsigned int user_vrsave;
 
 	if (!vcpu->arch.sane) {
 		run->exit_reason = KVM_EXIT_INTERNAL_ERROR;
@@ -1974,11 +1971,10 @@
 			run->fail_entry.hardware_entry_failure_reason = 0;
 			return -EINVAL;
 		}
-		/* Enable TM so we can read the TM SPRs */
-		mtmsr(mfmsr() | MSR_TM);
 		current->thread.tm_tfhar = mfspr(SPRN_TFHAR);
 		current->thread.tm_tfiar = mfspr(SPRN_TFIAR);
 		current->thread.tm_texasr = mfspr(SPRN_TEXASR);
+		current->thread.regs->msr &= ~MSR_TM;
 	}
 #endif
 
@@ -2005,15 +2001,12 @@
 	flush_altivec_to_thread(current);
 	flush_vsx_to_thread(current);
 
-	/* Save userspace EBB and other register values */
+	/* Save userspace EBB register values */
 	if (cpu_has_feature(CPU_FTR_ARCH_207S)) {
 		ebb_regs[0] = mfspr(SPRN_EBBHR);
 		ebb_regs[1] = mfspr(SPRN_EBBRR);
 		ebb_regs[2] = mfspr(SPRN_BESCR);
-		user_tar = mfspr(SPRN_TAR);
-		proc_fscr = mfspr(SPRN_FSCR);
 	}
-	user_vrsave = mfspr(SPRN_VRSAVE);
 
 	vcpu->arch.wqp = &vcpu->arch.vcore->wq;
 	vcpu->arch.pgdir = current->mm->pgd;
@@ -2034,28 +2027,12 @@
 		}
 	} while (is_kvmppc_resume_guest(r));
 
-	/* Restore userspace EBB and other register values */
+	/* Restore userspace EBB register values */
 	if (cpu_has_feature(CPU_FTR_ARCH_207S)) {
 		mtspr(SPRN_EBBHR, ebb_regs[0]);
 		mtspr(SPRN_EBBRR, ebb_regs[1]);
 		mtspr(SPRN_BESCR, ebb_regs[2]);
-		mtspr(SPRN_TAR, user_tar);
-		mtspr(SPRN_FSCR, proc_fscr);
 	}
-	mtspr(SPRN_VRSAVE, user_vrsave);
-
-	/*
-	 * Since we don't do lazy TM reload, we need to reload
-	 * the TM registers here.
-	 */
-#ifdef CONFIG_PPC_TRANSACTIONAL_MEM
-	if (cpu_has_feature(CPU_FTR_TM) && current->thread.regs &&
-	    (current->thread.regs->msr & MSR_TM)) {
-		mtspr(SPRN_TFHAR, current->thread.tm_tfhar);
-		mtspr(SPRN_TFIAR, current->thread.tm_tfiar);
-		mtspr(SPRN_TEXASR, current->thread.tm_texasr);
-	}
-#endif
 
  out:
 	vcpu->arch.state = KVMPPC_VCPU_NOTREADY;
